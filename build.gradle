plugins {
	id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
	//id "fabric-loom" version "0.10-SNAPSHOT" apply false
	id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

subprojects {
	apply plugin: "dev.architectury.loom"
	//apply plugin: "fabric-loom"
	apply plugin: 'com.github.johnrengelman.shadow'

	loom {
		mixin {
			defaultRefmapName = "$id$.refmap.mixins.json"
		}
	}

	configurations {
		inc
		implementation.extendsFrom inc
	}

	shadowJar {
		configurations = [project.configurations.inc]
		relocate 'dev.tr7zw.donor', '$relocationpackage$.donor'
		relocate 'dev.tr7zw.config', '$relocationpackage$.config'
	}

	remapJar {
		dependsOn(shadowJar)
		input = shadowJar.archiveFile
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings loom.officialMojangMappings()

		$dependencies$

	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "maven-publish"

	archivesBaseName = rootProject.archives_base_name
	version = rootProject.mod_version + "-mc" + rootProject.minecraft_version
	group = rootProject.maven_group

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
		maven {
			// for fabric
			url = "https://maven.modmuss50.me/"
		}
		maven {
        	url "https://cursemaven.com"
    	}
		maven { url "https://repo.codemc.io/repository/maven-public/" }
        maven { url "https://repo.codemc.io/repository/maven-snapshots/" }
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
		// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
		// We'll use that if it's available, but otherwise we'll use the older option.
		def targetVersion = 17
		if (JavaVersion.current().isJava9Compatible()) {
			options.release = targetVersion
		}
	}

	java {
		withSourcesJar()
	}
}