plugins {
	id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
	//id "fabric-loom" version "0.10-SNAPSHOT" apply false
	id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
	id "com.diffplug.spotless" version "6.22.0" apply false
	
    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. This setup is copied from sodium
    id 'org.ajoberstar.grgit' version '5.2.0'
}

subprojects {
	if (!project.name.toLowerCase().contains("versionless")) {
		apply plugin: 'eclipse'
		apply plugin: "dev.architectury.loom"
		//apply plugin: "fabric-loom"
		apply plugin: 'com.github.johnrengelman.shadow'

		loom {
			mixin {
				useLegacyMixinAp = true
				defaultRefmapName = "$id$.refmap.mixins.json"
			}
			silentMojangMappingsLicense()
			<accesswidener>
			accessWidenerPath = file("../Shared/src/main/resources/$id$.accesswidener")
			</accesswidener>
		}

		configurations {
			inc
			implementation.extendsFrom inc
		}

		shadowJar {
			configurations = [project.configurations.inc]
			relocate 'dev.tr7zw.util', '$relocationpackage$.util'
			relocate 'dev.tr7zw.config', '$relocationpackage$.config'
		}

		remapJar {
			dependsOn(shadowJar)
			input = shadowJar.archiveFile

			doLast {
				// Delete the shadowJar.archiveFile after remapJar task is executed
				delete shadowJar.archiveFile
			}
		}

		processResources {
			duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

			var replaceProperties = [
					minecraft_version   : minecraft_version, minecraft_version_range_forge: minecraft_version_range_forge,
					neoforge_version         : neoforge_version, neo_version_range: neo_version_range,
					minecraft_version_range_fabric: minecraft_version_range_fabric,
					loader_version_range_neoforge: loader_version_range_neoforge,
					loader_version_range_forge: loader_version_range_forge,
					description		 : "$description$",
					homepage_url		 : "$homepageUrl$",
					sources_url		 : "$sourcesUrl$",
					issues_url		 : "$issuesUrl$",
					license_name: "$licenseName$",
					mod_id              : "$id$", mod_name: "$name$", version: "$version$${getVersionMetadata()}",
					mod_author         : "$author$", pack_format_number: pack_format_number,
			]
			inputs.properties replaceProperties

			filesMatching(['fabric.mod.json', 'META-INF/mods.toml', 'pack.mcmeta']) {
				expand replaceProperties + [project: project]
			}

			from "${project.rootDir}/$licensename$"

		}

		dependencies {
			minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
			mappings loom.layered() {
				officialMojangMappings()
				parchment("org.parchmentmc.data:parchment-${rootProject.parchment_mc_version}:${rootProject.parchment_version}@zip")
			}

			compileOnly 'org.projectlombok:lombok:1.18.30'
			annotationProcessor 'org.projectlombok:lombok:1.18.30'
			
			testCompileOnly 'org.projectlombok:lombok:1.18.30'
			testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

			$dependencies$

		}

		afterEvaluate { project ->
			project.tasks.withType(JavaExec) { task ->
				if (task.name.startsWith("runClient")) {
					task.doFirst {
						def binDir = project.file('bin')
						if (binDir.exists()) {
							deleteBinDir(binDir)
						}
					}
				}
			}
    	}
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "maven-publish"

	archivesBaseName = rootProject.archives_base_name
	version = rootProject.mod_version + "-mc" + rootProject.minecraft_version + getVersionMetadata()
	group = rootProject.maven_group

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
		maven { url "https://maven.neoforged.net/releases/" }
		maven {
			// for fabric
			url = "https://maven.modmuss50.me/"
		}
		maven {
        	url "https://cursemaven.com"
    	}
		maven { url "https://repo.codemc.io/repository/maven-public/" }
        maven { url "https://repo.codemc.io/repository/maven-snapshots/" }
		maven { url "https://aperlambda.github.io/maven" }
		maven { url 'https://jitpack.io' }
		maven {
			name = 'ParchmentMC'
			url = 'https://maven.parchmentmc.org'
     	}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
		// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
		// We'll use that if it's available, but otherwise we'll use the older option.
		def targetVersion = 17
		if (JavaVersion.current().isJava9Compatible()) {
			options.release = targetVersion
		}
	}

	java {
		//withSourcesJar()
	}


}

apply plugin: "com.diffplug.spotless"

spotless {
	java {
		target '**/*.java'
		eclipse().configFile("${project.rootDir}/formatter.xml")
	}
	format 'misc', {
		target '**/*.gitattributes', '**/*.gitignore', '**/*.toml'

		trimTrailingWhitespace()
		endWithNewline()
	}
	yaml {
		target '**/*.yaml'
		jackson()
	}
	json {
		target '**/*.json' 
		gson()
	}
	flexmark {
		target '**/*.md'
		flexmark()
	}
}

compileJava.dependsOn 'spotlessApply'

def getVersionMetadata() {
    // CI builds only
    if (project.hasProperty("build.release")) {
        return "" // no tag whatsoever
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+git.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}

// Function to delete bin directory recursively
def deleteBinDir(dir) {
    ant.delete(dir: dir, failonerror: false)
}